{"id":"bdececa6-4037-4ed9-89b6-0f499a281a67","title":"Securely Serving a Static Site on AWS S3 with CloudFront","layout":"blog","status":"published","slug":"posts/securely-serving-a-static-site-on-aws-s3-with-cloudfront","date":"2021-02-25","tags":"AWS, Cloud, CloudFront, S3","content":"For any sadists out there who enjoy the quirkiness of the the AWS permissions ecosystem, you'll love this one.\n\nI've been working on a project recently that involves hosting a static site on S3 and serving it via CloudFront CDN. AWS has some [good documentation](https://aws.amazon.com/premiumsupport/knowledge-center/cloudfront-serve-static-website/) on the process but I ended up running into a problem that I found to be incredibly frustrating. Since I spent about a full day getting way too deep into the docs on this issue, I thought I'd spell it out for any other poor souls that run into the same trouble:\n<br/>\n<br/>\n\n## Public Read Access to a Bucket Makes me Nervous\nWhen you setup your bucket with a web-hosting configuration the [docs](https://docs.aws.amazon.com/AmazonS3/latest/user-guide/static-website-hosting.html) instruct to use a bucket policy that allows public read access such as:\n``` json\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"PublicReadGetObject\",\n            \"Effect\": \"Allow\",\n            \"Principal\": \"*\",\n            \"Action\": [\n                \"s3:GetObject\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::example.com/*\"\n            ]\n        }\n    ]\n}\n```\n<br/>\n\nThen your content gets served via a website similar to <code>mybucket.com.s3-website-<region>.amazonaws.com</code>. \n\nNow, we've just given public read access to our bucket, but we want to serve the site through CloudFront only. We don't want people using the direct S3 website endpoints, we want to restrict it to our CloudFront configuration. Usually what AWS suggests is to use an Origin Access Identity and update the bucket policy to restrict to that OAI. \n\nBut if there's one thing I've learned while using AWS, it's that there's always one little info box that can suddenly end days of failed deployments and poring through docs. In this case, it's this one in these [docs](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html):\n<br/>\n![Amazon documentation](/assets/img/jm2nd48evbllpkpsl2q4.png)\n<br/>\n<br/>\n\nThese are the docs on configuring CloudFront for S3 content, and they explicitly state that you can't restrict bucket access when using a website configuration. What they suggest is using a custom header in your CloudFront configuration instead and conditionally requiring that header in the bucket policy. \n<br/> \n<br/>\n\n## Using a Custom Header to Secure Bucket Access\nTo implement this, you can go into your distribution's settings, and add a custom header:\n<br/>\n![Cloudfront headers](/assets/img/7d7f1fca-850d-4b60-a284-4f4806db372a.jpg)\n<br/>\n<br/>\n\nFor the value field, use a value that's unique, or something that only you know. I just used the Python <code>secrets.token_urlsafe()</code> [function](https://docs.python.org/3/library/secrets.html#secrets.token_urlsafe)\n<br/>\n \nThen we can update the bucket policy to read this:\n``` json\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"CloudFrontGetObject\",\n            \"Effect\": \"Allow\",\n            \"Principal\": \"*\",\n            \"Action\": [\n                \"s3:GetObject\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::example.com/*\"\n            ],\n            \"Condition\": {\n             \"StringLike\": {\n                \"aws:Referer\": \"gQye0hsIAIsnEnX1EIwUNVLa5Tnly5UFthZrx6n7-gI\"\n              }\n            }\n        }\n    ]\n}\n```\nNotice the last key \"Condition\". We use a \"StringLike\" match on the Referer header on the request to ensure that the we only allow access to requests that match our unique key. Now, when we try to access our S3 website via the object URLs instead of through CloudFront we'll get an Access Denied error and we've successfully secured our bucket content.\n\nIn the event that this post didn't help at all, here's a couple of articles that should point you in the right direction:\n- [AWS: Serve a static site](https://aws.amazon.com/premiumsupport/knowledge-center/cloudfront-serve-static-website/)\n- [Reddit: 6 upvotes](https://www.reddit.com/r/aws/comments/b6r9xe/is_there_a_way_to_restrict_access_to_a_s3_static/ejmtsdw/?context=8&depth=9)\n"}